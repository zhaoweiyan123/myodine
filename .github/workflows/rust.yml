# GitHub Actions工作流配置文件

name: Build and Release

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
jobs:
  build:
    runs-on: ${{ matrix.os }} # 定义作业运行的操作系统
    strategy:
      matrix:
        os: [ubuntu-latest] # 定义操作系统矩阵 --暂时忽略  macos-latest, windows-latest
        arch: [x86_64] # 定义架构矩阵 --aarch64

    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          known_hosts: 'just-a-placeholder'

      - name: Checkout code
        uses: actions/checkout@v2 # 检出仓库代码

      - name: Set up Rust
        uses: actions-rs/toolchain@v1 # 设置Rust工具链
        with:
          toolchain: nightly # 使用稳定版Rust工具链
          profile: minimal # 使用最小化配置文件
          override: true # 覆盖任何现有的Rust工具链设置

      - name: Build project
        run: |
          rustup component add rust-src --toolchain nightly-x86_64-unknown-linux-gnu
          sudo apt install musl-tools -y
          rustup target add x86_64-unknown-linux-musl
          cargo build -Z build-std=std,panic_abort -Z build-std-features=panic_immediate_abort  --target x86_64-unknown-linux-musl --release
        env:
          CARGO_NET_GIT_FETCH_WITH_CLI: true
          CARGO_BUILD_JOBS: 8
          BUILD_TARGET: x86_64-unknown-linux-musl
          CARGO_TERM_COLOR: always

      # 上传Linux x86_64平台的构建产物
      - name: Upload artifact (Linux)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-latest-clientking
          path: target/x86_64-unknown-linux-musl/release/live_response

      # 上传Linux aarch64平台的构建产物
      - name: Upload artifact (Linux aarch64)
        if: matrix.os == 'ubuntu-latest' && matrix.arch == 'aarch64'
        uses: actions/upload-artifact@v4
        with:
          name: ubuntu-latest-clientking-aarch64
          path: target/x86_64-unknown-linux-musl/release/live_response

      # 上传macOS x86_64平台的构建产物
      - name: Upload artifact (macOS)
        if: matrix.os == 'macos-latest' && matrix.arch == 'x86_64'
        uses: actions/upload-artifact@v4
        with:
          name: macos-latest-clientking
          path: target/x86_64-unknown-linux-musl/release/live_response

      # 上传macOS aarch64平台的构建产物
      - name: Upload artifact (macOS aarch64)
        if: matrix.os == 'macos-latest' && matrix.arch == 'aarch64'
        uses:  actions/upload-artifact@v4
        with:
          name: macos-latest-clientking-aarch64
          path: target/x86_64-unknown-linux-musl/release/live_response

      # 上传Windows x86_64平台的构建产物
      - name: Upload artifact (Windows)
        if: matrix.os == 'windows-latest' && matrix.arch == 'x86_64'
        uses:  actions/upload-artifact@v4
        with:
          name: windows-latest-clientking
          path: target/x86_64-unknown-linux-musl/release/live_response.exe

      # 上传Windows aarch64平台的构建产物
      - name: Upload artifact (Windows aarch64)
        if: matrix.os == 'windows-latest' && matrix.arch == 'aarch64'
        uses: actions/upload-artifact@v4
        with:
          name: windows-latest-clientking-aarch64
          path: target/x86_64-unknown-linux-musl/release/live_response.exe